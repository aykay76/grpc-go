// Code generated by protoc-gen-go. DO NOT EDIT.
// source: environment.proto

package environment

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type KeyValuePair struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeyValuePair) Reset()         { *m = KeyValuePair{} }
func (m *KeyValuePair) String() string { return proto.CompactTextString(m) }
func (*KeyValuePair) ProtoMessage()    {}
func (*KeyValuePair) Descriptor() ([]byte, []int) {
	return fileDescriptor_64e647b85623514a, []int{0}
}

func (m *KeyValuePair) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeyValuePair.Unmarshal(m, b)
}
func (m *KeyValuePair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeyValuePair.Marshal(b, m, deterministic)
}
func (m *KeyValuePair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyValuePair.Merge(m, src)
}
func (m *KeyValuePair) XXX_Size() int {
	return xxx_messageInfo_KeyValuePair.Size(m)
}
func (m *KeyValuePair) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyValuePair.DiscardUnknown(m)
}

var xxx_messageInfo_KeyValuePair proto.InternalMessageInfo

func (m *KeyValuePair) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KeyValuePair) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*KeyValuePair)(nil), "environment.KeyValuePair")
}

func init() {
	proto.RegisterFile("environment.proto", fileDescriptor_64e647b85623514a)
}

var fileDescriptor_64e647b85623514a = []byte{
	// 200 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4c, 0xcd, 0x2b, 0xcb,
	0x2c, 0xca, 0xcf, 0xcb, 0x4d, 0xcd, 0x2b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x46,
	0x12, 0x92, 0x92, 0x4e, 0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x07, 0x4b, 0x25, 0x95, 0xa6, 0xe9,
	0xa7, 0xe6, 0x16, 0x94, 0x54, 0x42, 0x54, 0x2a, 0x99, 0x71, 0xf1, 0x78, 0xa7, 0x56, 0x86, 0x25,
	0xe6, 0x94, 0xa6, 0x06, 0x24, 0x66, 0x16, 0x09, 0x09, 0x70, 0x31, 0x67, 0xa7, 0x56, 0x4a, 0x30,
	0x2a, 0x30, 0x6a, 0x70, 0x06, 0x81, 0x98, 0x42, 0x22, 0x5c, 0xac, 0x65, 0x20, 0x69, 0x09, 0x26,
	0xb0, 0x18, 0x84, 0x63, 0xd4, 0xce, 0xc4, 0x25, 0xe4, 0x8a, 0xb0, 0x24, 0x38, 0xb5, 0xa8, 0x2c,
	0x33, 0x39, 0x55, 0x28, 0x80, 0x4b, 0xcc, 0x3d, 0xb5, 0x04, 0x49, 0x22, 0x2c, 0xb1, 0x28, 0x33,
	0x31, 0x29, 0x27, 0x55, 0x48, 0x52, 0x0f, 0xd9, 0x99, 0xc8, 0x76, 0x4a, 0xe1, 0x96, 0x52, 0x62,
	0x10, 0xf2, 0xe5, 0x12, 0x0b, 0x26, 0xd9, 0x44, 0x31, 0x3d, 0x88, 0x9f, 0xf5, 0x60, 0x7e, 0xd6,
	0x73, 0x05, 0xf9, 0x59, 0x89, 0x41, 0x28, 0x80, 0x4b, 0x1c, 0xbb, 0x03, 0x8b, 0x85, 0x70, 0x68,
	0xc2, 0xeb, 0x3c, 0x03, 0xc6, 0x24, 0x36, 0xb0, 0x72, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x18, 0x19, 0xa2, 0x26, 0x87, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EnvironmentServiceClient is the client API for EnvironmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EnvironmentServiceClient interface {
	GetEnvironmentVariable(ctx context.Context, in *KeyValuePair, opts ...grpc.CallOption) (*KeyValuePair, error)
	SetEnvironmentVariable(ctx context.Context, in *KeyValuePair, opts ...grpc.CallOption) (*empty.Empty, error)
	GetEnvironmentVariables(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (EnvironmentService_GetEnvironmentVariablesClient, error)
}

type environmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEnvironmentServiceClient(cc grpc.ClientConnInterface) EnvironmentServiceClient {
	return &environmentServiceClient{cc}
}

func (c *environmentServiceClient) GetEnvironmentVariable(ctx context.Context, in *KeyValuePair, opts ...grpc.CallOption) (*KeyValuePair, error) {
	out := new(KeyValuePair)
	err := c.cc.Invoke(ctx, "/environment.EnvironmentService/GetEnvironmentVariable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentServiceClient) SetEnvironmentVariable(ctx context.Context, in *KeyValuePair, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/environment.EnvironmentService/SetEnvironmentVariable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentServiceClient) GetEnvironmentVariables(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (EnvironmentService_GetEnvironmentVariablesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EnvironmentService_serviceDesc.Streams[0], "/environment.EnvironmentService/GetEnvironmentVariables", opts...)
	if err != nil {
		return nil, err
	}
	x := &environmentServiceGetEnvironmentVariablesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EnvironmentService_GetEnvironmentVariablesClient interface {
	Recv() (*KeyValuePair, error)
	grpc.ClientStream
}

type environmentServiceGetEnvironmentVariablesClient struct {
	grpc.ClientStream
}

func (x *environmentServiceGetEnvironmentVariablesClient) Recv() (*KeyValuePair, error) {
	m := new(KeyValuePair)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EnvironmentServiceServer is the server API for EnvironmentService service.
type EnvironmentServiceServer interface {
	GetEnvironmentVariable(context.Context, *KeyValuePair) (*KeyValuePair, error)
	SetEnvironmentVariable(context.Context, *KeyValuePair) (*empty.Empty, error)
	GetEnvironmentVariables(*empty.Empty, EnvironmentService_GetEnvironmentVariablesServer) error
}

// UnimplementedEnvironmentServiceServer can be embedded to have forward compatible implementations.
type UnimplementedEnvironmentServiceServer struct {
}

func (*UnimplementedEnvironmentServiceServer) GetEnvironmentVariable(ctx context.Context, req *KeyValuePair) (*KeyValuePair, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnvironmentVariable not implemented")
}
func (*UnimplementedEnvironmentServiceServer) SetEnvironmentVariable(ctx context.Context, req *KeyValuePair) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEnvironmentVariable not implemented")
}
func (*UnimplementedEnvironmentServiceServer) GetEnvironmentVariables(req *empty.Empty, srv EnvironmentService_GetEnvironmentVariablesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetEnvironmentVariables not implemented")
}

func RegisterEnvironmentServiceServer(s *grpc.Server, srv EnvironmentServiceServer) {
	s.RegisterService(&_EnvironmentService_serviceDesc, srv)
}

func _EnvironmentService_GetEnvironmentVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyValuePair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentServiceServer).GetEnvironmentVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/environment.EnvironmentService/GetEnvironmentVariable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentServiceServer).GetEnvironmentVariable(ctx, req.(*KeyValuePair))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentService_SetEnvironmentVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyValuePair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentServiceServer).SetEnvironmentVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/environment.EnvironmentService/SetEnvironmentVariable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentServiceServer).SetEnvironmentVariable(ctx, req.(*KeyValuePair))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentService_GetEnvironmentVariables_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EnvironmentServiceServer).GetEnvironmentVariables(m, &environmentServiceGetEnvironmentVariablesServer{stream})
}

type EnvironmentService_GetEnvironmentVariablesServer interface {
	Send(*KeyValuePair) error
	grpc.ServerStream
}

type environmentServiceGetEnvironmentVariablesServer struct {
	grpc.ServerStream
}

func (x *environmentServiceGetEnvironmentVariablesServer) Send(m *KeyValuePair) error {
	return x.ServerStream.SendMsg(m)
}

var _EnvironmentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "environment.EnvironmentService",
	HandlerType: (*EnvironmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEnvironmentVariable",
			Handler:    _EnvironmentService_GetEnvironmentVariable_Handler,
		},
		{
			MethodName: "SetEnvironmentVariable",
			Handler:    _EnvironmentService_SetEnvironmentVariable_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetEnvironmentVariables",
			Handler:       _EnvironmentService_GetEnvironmentVariables_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "environment.proto",
}
